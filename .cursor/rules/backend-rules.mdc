---
description: Guidelines for Project
globs: *.java, *.properties, *.yml
alwaysApply: false
---

# Review the Project Changelog and Project Directory notes below for our Ecommerce App's Spring Boot Back End. This back end interacts with a React Typescript Front End.

# Project Changelog

## Initial Setup and Core Infrastructure
v1.1
- Developed and deployed Spring Boot backend application
- Set up Azure SQL database for product storage
- Configured basic project structure and dependencies

## Module 1: Product Management
v1.2 - Product Module Implementation
- Established module-based architecture
- Created Product module with core components:
  - `Product.java`: Entity class for database mapping
    - Fields: id, imgUrl, descriptions, price, material, size
    - JPA annotations for database mapping
  - `ProductController.java`: REST endpoints for product operations
  - `ProductRepository.java`: JPA repository for database operations

v1.3 - Product API Endpoints
- Implemented REST endpoints in ProductController:
  - GET `/products`: Retrieve all products from database
  - POST `/product`: Add new product (currently unused)
- Added database query functionality through JPA repository

## Module 2: Stripe Payment Integration
v1.4 - Single Product Checkout
- Created Stripe payment processing module
- Implemented `ProductCheckoutController.java` with endpoints:
  - POST `/checkout`: Process single product payments
  - Configured basic Stripe API integration

v1.5 - Data Transfer Objects (DTOs)
- Created DTO classes for payment processing:
  - `ProductRequest.java`: Single product checkout data
    - Fields: amount, quantity, name, currency (Our legacy approach to checkout with only one product)
  - `ProductItem.java`: Simplified product data for Stripe
    - Fields: amount (in cents), quantity, name (New approach, represents individual items in a cart)
  - `CartRequest.java`: Shopping cart data structure (New approach, is a list of ProductItem objects)
    - Fields: List<ProductItem>, currency
  - `StripeResponse.java`: Stripe API response wrapper
    - Fields: status, message, sessionId, sessionUrl

v1.6 - Stripe Service Implementation
- Created `StripeService.java` to handle payment processing:
  - Implemented Stripe API configuration
  - Added checkout session creation
  - Configured success/cancel URL redirections
  - Added support for both single and multiple product checkout

v1.7 - Frontend Integration
- Enhanced `WebConfig.java` with:
  - Added `addResourceHandlers` method for client-side routing
  - Configured CORS for frontend-backend communication
  - Implemented path resolution for React Router integration


## Module 3: Transaction Management
v1.8 - Stripe Webhook Integration
- Implemented `StripeWebhookController.java` to handle Stripe events:
  - Processes webhook notifications from Stripe
  - Verifies webhook signatures for security
  - Handles multiple event types (checkout.session.completed, payment_intent.succeeded)
  - Stores transaction details in database for order history
- Created Transaction-related entities:
  - `Transaction.java`: Main transaction entity
    - Fields: id, stripeSessionId, stripePaymentIntentId, customerEmail, totalAmount, currency, paymentStatus, transactionDate
    - One-to-many relationship with TransactionItem
  - `TransactionItem.java`: Individual items in a transaction
    - Fields: id, productName, productId, quantity, price, totalPrice
    - Many-to-one relationship with Transaction
- Product ID Handling:
  - Product IDs are embedded in item descriptions during checkout: "Product Name [ID:123]"
  - Webhook controller extracts these IDs from descriptions to maintain database relationships
  - If extraction fails, falls back to using Stripe's price IDs
  - Recent fix: Improved error handling and logging for product ID extraction
  - stripe listen --forward-to http://localhost:9191/stripe/webhook

v1.9 - Production Webhook Fix
- Fixed critical production webhook issues:
  - Identified and resolved webhook signing secret mismatch in Azure environment
  - Updated Azure environment variables with the correct Stripe test mode webhook signing secret
  - Added improved webhook signature validation logging for debugging
  - Ensured proper environment-specific webhook configuration for test/production modes
  - Enhanced error handling in StripeWebhookController for better diagnostics
  - Validated successful transaction recording in the production database after checkout

## Module 4: Customer Information Management (Planned)
v2.0 - Customer Checkout Information (Planned)
- Dedicated controller for customer information:
  - `CustomerCheckoutController.java` with endpoint:
    - POST `/checkout`: Process customer and shipping information
  - Integration with existing payment flow
  
- Data models for customer information:
  - `CustomerInfo.java`: Customer details entity
    - Fields: id, name, email, phone, billingAddress
    - One-to-one relationship with ShippingInfo
    - One-to-many relationship with Transaction
  - `ShippingInfo.java`: Shipping details entity
    - Fields: id, address1, address2, city, state, zipCode, country, shippingNotes
    - Many-to-one relationship with CustomerInfo

- Enhanced checkout flow:
  1. Frontend collects and sends customer & shipping info in request body
  2. Backend stores info in database with link to pending sales_transaction
  3. Transaction record updated when payment completes via webhook
  4. Transaction ID used as link between customer data and sales records

- Benefits:
  - Order history with complete customer context
  - Shipping details for fulfillment process
  - Customer information for support and returns

## Current Features
- Product database management with Azure SQL
- Stripe payment processing for single products
- Shopping cart checkout functionality
- Frontend-backend integration with CORS support
- Client-side routing support
- Transaction history and order tracking
- Webhook-based payment confirmation

## Data Flow Architecture
1. Frontend sends checkout request with product data
2. ProductCheckoutController receives request
3. StripeService processes payment details
4. Stripe API creates checkout session
5. User redirected to Stripe checkout page
6. User completes payment on Stripe
7. Stripe sends webhook event to StripeWebhookController
8. StripeWebhookController creates Transaction and TransactionItems
9. Success/Cancel URLs handle payment result for user UI

## API Endpoints
- GET `/products`: Retrieve all products
- POST `/product`: Add new product
- POST `/checkout`: Single product checkout
- POST `/cart/checkout`: Multiple products checkout
- POST `/stripe/webhook`: Receive and process Stripe events

## Backlog
- Remove legacy checkout approach with one product
- Improve product ID extraction from Stripe webhooks
